services:
    mysql:
        container_name: "oai-mysql"
        image: mysql:8.0
        volumes:
            - ../common/oai_db.sql:/docker-entrypoint-initdb.d/oai_db.sql
            - ../common/mysql-healthcheck.sh:/tmp/mysql-healthcheck.sh
        environment:
            - TZ=Europe/Paris
            - MYSQL_DATABASE=oai_db
            - MYSQL_USER=test
            - MYSQL_PASSWORD=test
            - MYSQL_ROOT_PASSWORD=linux
        healthcheck:
            test: /bin/bash -c "/tmp/mysql-healthcheck.sh"
            interval: 10s
            timeout: 5s
            retries: 30
        networks:
            public_net:
                ipv4_address: 192.168.71.131
    oai-amf:
        container_name: "oai-amf"
        image: oai-amf:${AMF_TAG:-v2.0.1}
        environment:
            - TZ=Europe/paris
            - OPERATOR_KEY=63bfa50ee6523365ff14c1f45f88737d
        volumes:
            - ${MINI_CONFIG:-../common/mini_nonrf_config.yaml}:/openair-amf/etc/config.yaml
        depends_on:
            - mysql
        networks:
            public_net:
                ipv4_address: 192.168.71.132
    oai-smf:
        container_name: "oai-smf"
        image: oai-smf:${SMF_TAG:-v2.0.1}
        environment:
            - TZ=Europe/Paris
        volumes:
            - ${MINI_CONFIG:-../common/mini_nonrf_config.yaml}:/openair-smf/etc/config.yaml
        depends_on:
            - oai-amf
        networks:
            public_net:
                ipv4_address: 192.168.71.133
    oai-upf:
        container_name: "oai-upf"
        image: oai-upf:${UPF_TAG:-v2.0.1}
        environment:
            - TZ=Europe/Paris
        # Manually add the advanced routing options in the UPF
        # Remark: this requires the Jetson kernel to be built with advanced
        # routing options. Call entrypoint afterwards and run upf scripts.
        entrypoint: /bin/bash -c \
                    "echo '200 eth1_table' >> /etc/iproute2/rt_tables;"\
                    "ip route add default via 192.168.72.129 dev eth1 table eth1_table;"\
                    "ip rule add from 12.1.1.0/24 table eth1_table;"\
                    "/openair-upf/bin/oai_upf -c /openair-upf/etc/config.yaml -o"
        volumes:
            - ${MINI_CONFIG:-../common/mini_nonrf_config.yaml}:/openair-upf/etc/config.yaml
        depends_on:
            - oai-smf
        cap_add:
            - NET_ADMIN
            - SYS_ADMIN
            - NET_RAW
        privileged: true
        networks:
            public_net:
                ipv4_address: 192.168.71.134
            traffic_net:
                ipv4_address: 192.168.72.134

    oai-ext-dn:
        privileged: true
        container_name: oai-ext-dn
        image: trf-gen-cn5g:${TRFGEN_TAG:-latest}
        entrypoint: /bin/bash -c \
              "iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE;"\
              "ip route add 12.1.1.0/24 via 192.168.72.134 dev eth0; sleep infinity"
        depends_on:
            - oai-upf
        networks:
            traffic_net:
                ipv4_address: 192.168.72.135
        healthcheck:
            test: /bin/bash -c "ping -c 2 192.168.72.134"
            interval: 10s
            timeout: 5s
            retries: 5

    oai-gnb:
        image: ${GNB_IMAGE:-oai-gnb-cuda}:${GNB_TAG:-latest}
        container_name: oai-gnb
        runtime: nvidia
        cap_drop:
            - ALL
        cap_add:
            - NET_ADMIN  # for interface bring-up
            - SYS_NICE # for thread affinity
            - IPC_LOCK # to avoid page swapping
        environment:
            USE_B2XX: 'yes'
            USE_ADDITIONAL_OPTIONS: --sa --RUs.[0].sdr_addrs serial=${USRP_SERIAL:?"missing USRP_SERIAL variable, set .env file"},clock_source=external,time_source=external --telnetsrv --continuous-tx --log_config.global_log_options level,time,line_num,function --reorder-thread-disable 1 ${GNB_EXTRA_OPTIONS:-}
            ASAN_OPTIONS: detect_leaks=0
        devices:
            - /dev/bus/usb/:/dev/bus/usb/
        depends_on:
            - oai-ext-dn
        networks:
            public_net:
                ipv4_address: 192.168.71.140
        volumes:
            - ${GNB_CONFIG:-../common/gnb.sa.usrpb200.24prbs.conf}:/opt/oai-gnb/etc/gnb.conf # select config
        healthcheck:
            test: /bin/bash -c "ps aux | grep -v grep | grep -c softmodem"
            interval: 10s
            timeout: 5s
            retries: 5

    oai-nr-ue:
        image: ${UE_IMAGE:-oai-nr-ue-cuda}:${UE_TAG:-latest}
        container_name: oai-nr-ue
        runtime: nvidia
        cap_add:
            - NET_ADMIN  # for interface bring-up
            - NET_RAW    # for ping
            - SYS_NICE # for thread affinity
            - IPC_LOCK # to avoid page swapping
        environment:
            USE_B2XX: 'yes' # load UHD driver
            USE_ADDITIONAL_OPTIONS: --sa --usrp-args serial=${USRP_SERIAL_UE:?"missing USRP_SERIAL_UE variable, set .env file"} --uicc0.imsi 262990100000832 --ue-fo-compensation --band 78 ${UE_EXTRA_OPTIONS:-}
        networks:
            public_net:
                ipv4_address: 192.168.71.150
        devices:
            - /dev/net/tun:/dev/net/tun
            - /dev/bus/usb/:/dev/bus/usb/ # mount USRP
        volumes:
            - ${UE_CONFIG:-../common/nrue.uicc.conf}:/opt/oai-nr-ue/etc/nr-ue.conf
        healthcheck:
            test: /bin/bash -c "pgrep nr-uesoftmodem"
            interval: 10s
            timeout: 5s
            retries: 5

networks:
    public_net:
        driver: bridge
        name: oai-public-net
        ipam:
            config:
                - subnet: 192.168.71.128/26
        driver_opts:
            com.docker.network.bridge.name: "oai-public"
    traffic_net:
        driver: bridge
        name: oai-traffic-net
        ipam:
            config:
                - subnet: 192.168.72.128/26
        driver_opts:
            com.docker.network.bridge.name: "oai-traffic"
